// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleAPI.Data;

#nullable disable

namespace SimpleAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230301163109_add member hobby")]
    partial class addmemberhobby
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SimpleAPI.Models.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HobbyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberHobbyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberHobbyId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("SimpleAPI.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemberHobbyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberHobbyId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("SimpleAPI.Models.MemberHobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MembersHobbies");
                });

            modelBuilder.Entity("SimpleAPI.Models.Hobby", b =>
                {
                    b.HasOne("SimpleAPI.Models.MemberHobby", null)
                        .WithMany("Hobbies")
                        .HasForeignKey("MemberHobbyId");
                });

            modelBuilder.Entity("SimpleAPI.Models.Member", b =>
                {
                    b.HasOne("SimpleAPI.Models.MemberHobby", null)
                        .WithMany("Members")
                        .HasForeignKey("MemberHobbyId");
                });

            modelBuilder.Entity("SimpleAPI.Models.MemberHobby", b =>
                {
                    b.Navigation("Hobbies");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
